<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
		if(input.GetName().Equals("definitions")) {
				input.TakeAsArray();
			    return this.GenerationEnvironment.ToString();  
		}
#>

from jsonmodelschema import JObject
from jsonmodelschema import JArray
from jsonmodelschema import JNumber
from jsonmodelschema import JString
from jsonmodelschema import JMixed

<#
   foreach(InputTreeNode ModelProperty in input.GetChildren("properties")) {
    if(ModelProperty.HasProperty("$ref") && ModelProperty.Property("$ref").StartsWith("#/definitions/")) {
	  string RefName = ModelProperty.Property("$ref").Substring(14);	 
#>
from <#=RefName#> import <#=RefName#>
<# 
   } else if(ModelProperty.HasPropertyValue("type","array") ) {
			InputTreeNode items = ModelProperty.PropertyObject("items");
			  if(items.HasProperty("$ref") && items.Property("$ref").StartsWith("#/definitions/")) {
			    string RefName = items.Property("$ref").Substring(14); 
#>
from <#=RefName#> import <#=RefName#>
<# 
		}
	}
  } // 21
			if(input.HasProperty("type")) 
			{
			  if(input.Property("type").Equals("object")) {
#>
# [START <#=input.GetName()#>_model]
# <#=input.Property("description")#>
class <#=input.GetNameForClassName()#>(JObject):
	"""<#=input.Property("title")#>"""
	def __init__(self,**kwargs):
		super(<#=input.GetNameForClassName()#>, self).__init__(**kwargs)
<#
   foreach(InputTreeNode ModelProperty in input.GetChildren("properties")) {
			if(ModelProperty.HasPropertyValue("type","string")) {
#>
		self.<#=ModelProperty.Name#> = JString()
<#
			} else if(ModelProperty.HasPropertyValue("type","array")) {
			InputTreeNode items = ModelProperty.PropertyObject("items");
			string RefName = "";
			  if(items.HasProperty("$ref") && items.Property("$ref").StartsWith("#/definitions/")) {
			     RefName = "itemCls="+items.Property("$ref").Substring(14)+""; 
			  }
#>
		self.<#=ModelProperty.Name#> = JArray(<#=RefName#>)
<#
				
			} else if(ModelProperty.HasProperty("$ref") && ModelProperty.Property("$ref").StartsWith("#/definitions/")) {
					 string RefName = ModelProperty.Property("$ref").Substring(14);
#>
		self.<#=ModelProperty.Name#> = <#=RefName#>()
<#
			} else if(ModelProperty.HasProperty("type")) {
				InputTreeNode typeNode = ModelProperty.PropertyObject("type");
				  string types_list = ""; 
				  foreach(InputTreeNode childType in typeNode.childs) {
				    types_list += " '" + childType.Name + "' ,";
				  }
				  types_list = types_list.Trim(',');
#>
		self.<#=ModelProperty.Name#> = JMixed(typelist=[<#=types_list#>])
<#			    
			}
  }// foreach(InputTreeNode ModelProperty in input.GetChildren("properties"))
#>
# [END <#=input.GetName()#>_model]
<#
        } //if(input.Property("type").Equals("string"))
      } // if(input.HasProperty("type")) 
#>